upstream backend {
  server backend:3030 max_fails=3 fail_timeout=30s;
}

# this section is needed to proxy web-socket connections
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 443 ssl;
    server_name api.local.app;
    root /usr/share/nginx/html;
    index index.html index.htm;

    ssl                    on;
    ssl_certificate        /etc/ssl/private/local.app+1.pem;
    ssl_certificate_key    /etc/ssl/private/local.app+1-key.pem;

    location /favicon.ico {
      alias /assets/web/favicon.ico;
    }

    location /assets/ {
        rewrite ^/assets/(.*) /$1 break;
        root /assets/web;
        autoindex off;
    }

    client_max_body_size 20M;
    proxy_max_temp_file_size 2048m; # default 1024m

    rewrite_log on;

    location / {
      #access_log off;
      proxy_pass http://backend;

      proxy_http_version    1.1;
      proxy_redirect        off;
      proxy_buffering       off;
      proxy_cache           off;
      proxy_cache_bypass    $http_upgrade;
      add_header            Cache-Control no-cache;
      proxy_set_header      Upgrade $http_upgrade; #for websockets
      proxy_set_header      Connection $connection_upgrade;

      proxy_set_header      Host $host;
      proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header      X-Real-IP  $remote_addr;
      proxy_set_header      X-Real-Scheme $scheme;
      proxy_set_header      X-Real-Host $host;
      proxy_set_header      X-Real-Uri $request_uri;
      proxy_set_header      User-Agent $http_user_agent;
      proxy_set_header      Referer $http_referer;

      proxy_pass_header     Authorization;
      proxy_pass_header     Set-Cookie;
    }

    location /socket.io {
      #access_log off;

      proxy_pass http://backend;

      proxy_http_version    1.1;
      proxy_redirect        off;
      proxy_buffering       off;
      proxy_cache           off;
      proxy_cache_bypass    $http_upgrade;
      add_header            Cache-Control no-cache;
      proxy_set_header      Upgrade $http_upgrade; #for websockets
      proxy_set_header      Connection $connection_upgrade;

      proxy_set_header      Host $host;
      proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header      X-Real-IP  $remote_addr;
      proxy_set_header      X-Real-Scheme $scheme;
      proxy_set_header      X-Real-Host $host;
      proxy_set_header      X-Real-Uri $request_uri;
      proxy_set_header      User-Agent $http_user_agent;
      proxy_set_header      Referer $http_referer;

      proxy_pass_header     Authorization;
      proxy_pass_header     Set-Cookie;
    }

    #location /api {
    #  return 302 $uri/;
    #}

    location /api/ {
      #access_log off;
      rewrite ^/api/(.*) /$1 break;

      proxy_pass http://backend;

      proxy_http_version    1.1;
      proxy_redirect        off;
      proxy_buffering       off;
      proxy_cache           off;
      proxy_cache_bypass    $http_upgrade;
      add_header            Cache-Control no-cache;
      proxy_set_header      Upgrade $http_upgrade; #for websockets
      proxy_set_header      Connection $connection_upgrade;

      proxy_set_header      Host $host;
      proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header      X-Real-IP  $remote_addr;
      proxy_set_header      X-Real-Scheme $scheme;
      proxy_set_header      X-Real-Host $host;
      proxy_set_header      X-Real-Uri $request_uri;
      proxy_set_header      User-Agent $http_user_agent;
      proxy_set_header      Referer $http_referer;

      proxy_pass_header     Authorization;
      proxy_pass_header     Set-Cookie;
    }

}